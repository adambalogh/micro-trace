//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./log_types');
//HELPER FUNCTIONS AND STRUCTURES

var Collector_Collect_args = function(args) {
  this.logs = null;
  if (args) {
    if (args.logs !== undefined && args.logs !== null) {
      this.logs = Thrift.copyList(args.logs, [null]);
    }
  }
};
Collector_Collect_args.prototype = {};
Collector_Collect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.logs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readBinary();
          this.logs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Collector_Collect_args.prototype.write = function(output) {
  output.writeStructBegin('Collector_Collect_args');
  if (this.logs !== null && this.logs !== undefined) {
    output.writeFieldBegin('logs', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.logs.length);
    for (var iter7 in this.logs)
    {
      if (this.logs.hasOwnProperty(iter7))
      {
        iter7 = this.logs[iter7];
        output.writeBinary(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Collector_Collect_result = function(args) {
};
Collector_Collect_result.prototype = {};
Collector_Collect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Collector_Collect_result.prototype.write = function(output) {
  output.writeStructBegin('Collector_Collect_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CollectorClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
CollectorClient.prototype = {};
CollectorClient.prototype.seqid = function() { return this._seqid; };
CollectorClient.prototype.new_seqid = function() { return this._seqid += 1; };
CollectorClient.prototype.Collect = function(logs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Collect(logs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Collect(logs);
  }
};

CollectorClient.prototype.send_Collect = function(logs) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Collect', Thrift.MessageType.ONEWAY, this.seqid());
  var args = new Collector_Collect_args();
  args.logs = logs;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
var CollectorProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
CollectorProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
CollectorProcessor.prototype.process_Collect = function(seqid, input, output) {
  var args = new Collector_Collect_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.Collect(args.logs);
}
;
